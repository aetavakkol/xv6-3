#!/usr/bin/expect -f
 
set force_conservative 1  
if {$force_conservative} {
   set send_slow {1 .1}
   proc send {ignore arg} {
      sleep .1
      exp_send -s -- $arg
   }
}

set 1ST_LEVEL_PROMPT "\\\$ "
set timeout 5
global spawn_id
set pid [spawn make qemu]
match_max 100000

set testcases 10
set min -100
set max 100
set score 0
set log "\nHW1 Evaluation:\n"
set qs_full_score 10
global tuple

for {set i 1} {$i <= $testcases} {incr i 1} {
   expect -re $1ST_LEVEL_PROMPT 
   set n1 [expr {int(rand()*($max-$min+1)+$min)}]
   set n2 [expr {int(rand()*($max-$min+1)+$min)}]

   send -- "divide $n1 $n2\r"
   expect "is *\r"

   set res [lindex [split $expect_out(0,string)] 1]
   if {![catch {expr {abs($res)}}]} {
      incr tuple(ID)
      set id $tuple(ID)
      set tuple($id,num1) $n1
      set tuple($id,num2) $n2
      set tuple($id,res) $res
   }

}

exec kill -9 $pid

for {set i 1} {$i <= $testcases} {incr i 1} {
   spawn ./solution_divide $tuple($i,num1) $tuple($i,num2)
   expect "is *\r"
   set res [lindex [split $expect_out(0,string)] 1]

   if { $res == $tuple($i,res) } {
      set score [expr $score + $qs_full_score]
   } 
   puts "$i. Expected Outcome: $res, Actual Outcome: $tuple($i,res), Score: $score"
}

puts "Final Score: $score"
